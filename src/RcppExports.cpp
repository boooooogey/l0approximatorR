// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// L0PoissonApproximate
NumericVector L0PoissonApproximate(NumericVector y, NumericVector l, NumericVector w);
RcppExport SEXP _l0approximatorR_L0PoissonApproximate(SEXP ySEXP, SEXP lSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0PoissonApproximate(y, l, w));
    return rcpp_result_gen;
END_RCPP
}
// L0GaussianApproximate
NumericVector L0GaussianApproximate(NumericVector y, NumericVector l, NumericVector w);
RcppExport SEXP _l0approximatorR_L0GaussianApproximate(SEXP ySEXP, SEXP lSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0GaussianApproximate(y, l, w));
    return rcpp_result_gen;
END_RCPP
}
// L0ExponentialApproximate
NumericVector L0ExponentialApproximate(NumericVector y, NumericVector l, NumericVector w);
RcppExport SEXP _l0approximatorR_L0ExponentialApproximate(SEXP ySEXP, SEXP lSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0ExponentialApproximate(y, l, w));
    return rcpp_result_gen;
END_RCPP
}
// L0PoissonApproximateN
NumericVector L0PoissonApproximateN(NumericVector y, int N, NumericVector w);
RcppExport SEXP _l0approximatorR_L0PoissonApproximateN(SEXP ySEXP, SEXP NSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0PoissonApproximateN(y, N, w));
    return rcpp_result_gen;
END_RCPP
}
// L0GaussianApproximateN
NumericVector L0GaussianApproximateN(NumericVector y, int N, NumericVector w);
RcppExport SEXP _l0approximatorR_L0GaussianApproximateN(SEXP ySEXP, SEXP NSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0GaussianApproximateN(y, N, w));
    return rcpp_result_gen;
END_RCPP
}
// L0ExponentialApproximateN
NumericVector L0ExponentialApproximateN(NumericVector y, int N, NumericVector w);
RcppExport SEXP _l0approximatorR_L0ExponentialApproximateN(SEXP ySEXP, SEXP NSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L0ExponentialApproximateN(y, N, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_l0approximatorR_L0PoissonApproximate", (DL_FUNC) &_l0approximatorR_L0PoissonApproximate, 3},
    {"_l0approximatorR_L0GaussianApproximate", (DL_FUNC) &_l0approximatorR_L0GaussianApproximate, 3},
    {"_l0approximatorR_L0ExponentialApproximate", (DL_FUNC) &_l0approximatorR_L0ExponentialApproximate, 3},
    {"_l0approximatorR_L0PoissonApproximateN", (DL_FUNC) &_l0approximatorR_L0PoissonApproximateN, 3},
    {"_l0approximatorR_L0GaussianApproximateN", (DL_FUNC) &_l0approximatorR_L0GaussianApproximateN, 3},
    {"_l0approximatorR_L0ExponentialApproximateN", (DL_FUNC) &_l0approximatorR_L0ExponentialApproximateN, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_l0approximatorR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
